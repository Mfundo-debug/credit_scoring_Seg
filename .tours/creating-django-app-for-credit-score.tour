{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Creating django app for credit score",
  "steps": [
    {
      "title": "Introduction",
      "description": "creating django application step by step\r\n1. assuming you already created virtual env and activated it\r\n2. install the following library\r\n```python\r\npip install django djangorestframework\r\n```\r\n3 once the installation is complete, you can start a new django project by running the following cmd on the terminal\r\n```python\r\ndjango-admin start myproject\r\n```\r\n`myproject` can be replaced with the name of your project.\r\nafter this cmd you should see more files loaded then you goto where `myproject` is located using `cd` cmd\r\n4. you can then start django app by running the following cmd\r\n```python\r\npython manage.py start myapp\r\n```\r\nagain myapp can be replaced with the name of your app"
    },
    {
      "file": "credit_system/credit_score_app/models.py",
      "description": "Begin by navigating to your `models.py`\r\n1. Database Models: In your `credit_score_app/models.py`, define the database models that will store the customer data. You can create a model for each of the features described in your dataset",
      "line": 3
    },
    {
      "file": "credit_system/credit_score_app/models.py",
      "description": "To populate your database with the data from the CSV file, you can write a custom Django management command. Here's an example of how you can do this:\r\n\r\n1. Create a new directory called `management` in your Django app directory (if it doesn't already exist).\r\n2. Inside the `management` directory, create a new directory called `commands`.\r\n3. Inside the `commands` directory, create a new Python file called `load_data.py`.\r\n4. In `load_data.py`, import the necessary modules:\r\n\r\n   ```python\r\n   import csv\r\n   from django.core.management.base import BaseCommand\r\n   from myapp.models import Customer\r\n   ```\r\n\r\n   Replace `myapp` with the name of your Django app, and `Customer` with the name of your model.\r\n\r\n5. Define a new class that extends `BaseCommand`:\r\n\r\n   ```python\r\n   class Command(BaseCommand):\r\n       help = 'Loads data from a CSV file into the database'\r\n\r\n       def add_arguments(self, parser):\r\n           parser.add_argument('csv_file', type=str)\r\n\r\n       def handle(self, *args, **options):\r\n           csv_file = options['csv_file']\r\n           with open(csv_file, 'r') as f:\r\n               reader = csv.DictReader(f)\r\n               for row in reader:\r\n                   customer = Customer(\r\n                       age=row['Age'],\r\n                       gender=row['Gender'],\r\n                       marital_status=row['Marital Status'],\r\n                       education_level=row['Education Level'],\r\n                       employment_status=row['Employment Status'],\r\n                       credit_utilization_ratio=row['Credit Utilization Ratio'],\r\n                       payment_history=row['Payment History'],\r\n                       number_of_credit_accounts=row['Number of Credit Accounts'],\r\n                       loan_amount=row['Loan Amount'],\r\n                       interest_rate=row['Interest Rate'],\r\n                       loan_term=row['Loan Term'],\r\n                       type_of_loan=row['Type of Loan']\r\n                   )\r\n                   customer.save()\r\n           self.stdout.write(self.style.SUCCESS('Data loaded successfully'))\r\n   ```\r\n\r\n   This class defines a new management command called `load_data`. The `add_arguments` method defines a required argument called `csv_file`, which is the path to the CSV file. The `handle` method is called when the command is run, and it reads the data from the CSV file and creates a new `Customer` object for each row.\r\n\r\n6. Run the command `python manage.py load_data credit_scoring.csv` to load the data from the CSV file into your database.\r\n\r\n   Replace `credit_scoring.csv` with the name of your CSV file.\r\n\r\nThis custom management command will allow you to load the data from the CSV file into your database using the command `python manage.py load_data`. You can modify the code to match the specific requirements of your data and model.",
      "line": 22
    },
    {
      "file": "credit_system/management/commands/load_data.py",
      "description": "Created a class that extends BaseCommand\r\nThis class defines a new management command called `load_data`. The `add_arguments` method defines a required argument called `csv_file`, which in the path to the CSV file. the `handle` method is called when the commmand is run, and it read the data from CSV file and creates a new `Customer` object for each row.",
      "line": 5
    }
  ]
}